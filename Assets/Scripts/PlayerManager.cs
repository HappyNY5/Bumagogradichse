using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using UnityEngine.SceneManagement;


public class PlayerManager : MonoBehaviour
{
    [SerializeField] private Camera mainCamera;
    [SerializeField] private LayerMask groundLayer;

    [Space]
    [Header("Buildings settings")]
    [SerializeField] private List<GameObject> buildingsTextures = new List<GameObject>();
    [SerializeField] private GameObject builderChoiser_GO;

    [Space]
    [Header("User interface")]
    [SerializeField] private GameObject playerResources_UI;
    [SerializeField] private GameObject indMenu_UI;
    [SerializeField] private GameObject resoucesToBuild_UI;
    



    private List<GameObject> objectsOnDelete = new List<GameObject>();
    private int[] playerResouces = new int[4]{100,100,100,100};
    private int[] playerAutoGeneratedResources = new int[4];  
    private int peopleAll;
    private int peopleWorking;
    private int layerSelectedObject;
    private GameObject selectedObject;
    private GameObject selectedBlackBox;
    private bool buildingPointCreated = false;
    private bool buildingIsCreated = false;


    // void Awake()
    // {
    //     DontDestroyOnLoad(this.gameObject);
    // }

    void Start()
    {
        StartCoroutine(addResourcesAuto());
        playerResources_UI.active = true;
        PlayerResources_UI();

        mainCamera = Camera.main;

        // resoucesToBuild_UI.gameObject.active = false;
    }

    void Update()
    {
        Ray mouseRay = mainCamera.ScreenPointToRay(Input.mousePosition); 
        if (Physics.Raycast(mouseRay, out RaycastHit hit, float.MaxValue,groundLayer))          //Если касается layer = 10
        {
            Vector3 curPosPlayer = new Vector3(hit.point.x, hit.point.y, hit.point.z);             
            transform.position = curPosPlayer;                                                  //change obj pos
        }

        // Debug.Log(layerSelectedObject);

        switch (layerSelectedObject)
        {
            //Ground
            case 10:   
                if (Input.GetMouseButton(0) & !buildingIsCreated)
                {
                    DeleteObj();
                    selectedBlackBox.active = true;
                }
                break;

            case 11:
                if(Input.GetMouseButtonDown(0))
                {
                    SceneManager.LoadScene(1);
                }
                break;
            
            case 12:
                if(Input.GetMouseButtonDown(0))
                {
                    SceneManager.LoadScene(0);
                }
                break;

            //Black Box
            case 13:        
                if (Input.GetMouseButtonDown(0) & !buildingPointCreated)
                {
                    selectedBlackBox = selectedObject;
                    buildingIsCreated = false;
                    buildingPointCreated = true;
                    SpawnBuildingPoint(selectedBlackBox);
                }
                break;

            //Building Blocks
            case 15:
                ResourcesToBuild_UI();

                if (Input.GetMouseButtonDown(0))
                {
                    if(ResourcesIsEnought(selectedBlackBox))
                    {
                        buildingIsCreated = true;
                        SpawnBuilding(selectedBlackBox);
                    }
                }
                break;
            
            //Ind
            case 18:
                
                GameObject selectedInd = selectedObject;

                IndMenu_UI();
                
                if (Input.GetMouseButtonDown(0))
                {
                    ChangePlayerResources(selectedInd.GetComponent<IndScript>().resourcesPerClick, true);
                }
                else if (Input.GetMouseButtonDown(1) & !selectedInd.GetComponent<IndScript>().indWorking & peopleAll-peopleWorking > 0)
                {
                    selectedInd.GetComponent<IndScript>().peopleOnWork++;
                    peopleWorking++;

                    if (selectedInd.GetComponent<IndScript>().peopleOnWork == selectedInd.GetComponent<IndScript>().workers)
                    {
                        ChangePlayerAutoGenResources(selectedInd.GetComponent<IndScript>().resourcesPerClick, true);
                        selectedInd.GetComponent<IndScript>().indWorking = true;
                    }
                }
                break;


            default:
                Debug.Log("Layer not registered");
                break;
        }

        PlayerResources_UI();
    }



    //--------------------------------------------------------------

    private void PlayerResources_UI()
    {
        Transform[] childArray = playerResources_UI.GetComponentsInChildren<Transform>();
        
        int i = 0;
        foreach (Transform child in childArray)
        {
            if(child.name == "Text")
            {
                child.GetComponent<TMP_Text>().text = playerResouces[i].ToString() + "(+" + playerAutoGeneratedResources[i] +")";
                i++;
            }
            if(child.name == "TextPeople")
            {
                child.GetComponent<TMP_Text>().text = (peopleAll - peopleWorking).ToString();
                i++;
            }
        }
    }


    private void IndMenu_UI()
    {
        Transform[] childArray = indMenu_UI.GetComponentsInChildren<Transform>();
        
        foreach (Transform child in childArray)
        {

            if(child.name == "WorkersText")
            {
                child.GetComponent<TMP_Text>().text = selectedObject.GetComponent<IndScript>().peopleOnWork.ToString() + "/" + selectedObject.GetComponent<IndScript>().workers.ToString();
            }

            if(child.name == "WorkingBack" & selectedObject.GetComponent<IndScript>().indWorking)
            {
                Color greenColor = Color.green;
                greenColor.a = 0.75f;
                child.GetComponent<Image>().color = greenColor;
            }
            else if(child.name == "WorkingBack")
            {
                Color redColor = Color.red;
                redColor.a = 0.75f;
                child.GetComponent<Image>().color = redColor;
            }
        }
    }


    private void ResourcesToBuild_UI()
    {        
        Transform[] childArray = resoucesToBuild_UI.GetComponentsInChildren<Transform>();
        
        int i = 0;
        GameObject lastBack = new GameObject();
        
        Color redBack = Color.red;
        Color whiteBack = Color.white;
        redBack.a = 0.5f;
        whiteBack.a = 0.5f;

        foreach (Transform child in childArray)
        {

            if(child.name == "Slot" )
            {
                lastBack = child.gameObject;
            }
            
            if(child.name == "res")
            {
                child.GetComponent<TMP_Text>().text = selectedBlackBox.GetComponent<BlackBox>().resourcesToBuild[i].ToString();
                
                if(playerResouces[i] < selectedBlackBox.GetComponent<BlackBox>().resourcesToBuild[i])
                {
                    lastBack.GetComponent<Image>().color = redBack;
                }
                else
                {
                    lastBack.GetComponent<Image>().color = whiteBack;
                }
                i++;                
            }
        }
    }

    
    private void SpawnBuilding(GameObject _selectedBlackBox)
    {
        ChangePlayerResources(_selectedBlackBox.GetComponent<BlackBox>().resourcesToBuild, false);

        float buildingRotY = _selectedBlackBox.transform.eulerAngles.y;
        Vector3 curRot = new Vector3(90, 0, buildingRotY);

        Vector3 buildPos = _selectedBlackBox.transform.position;
        Vector3 curPos = buildPos + new Vector3(0, 70, 0);

        GameObject building = Instantiate(buildingsTextures[int.Parse(selectedObject.tag)], curPos, Quaternion.Euler(curRot));
        
        building.GetComponent<Rigidbody>().AddForce(Vector3.down * 50000f);            //Build Create speed
        
        if (building.layer == 16) //Res
        {
            peopleAll = peopleAll + _selectedBlackBox.GetComponent<BlackBox>().people;
        }
        
        if (building.layer == 18) //Ind
        {
            building.GetComponent<IndScript>().resourcesPerClick = _selectedBlackBox.GetComponent<BlackBox>().resourcesPerClick;
            building.GetComponent<IndScript>().workers = _selectedBlackBox.GetComponent<BlackBox>().peopleWorking;
        }

        // playerResources_text.text = ReturnResourcesString(playerResouces);
        DeleteObj();
    }


    private void ChangePlayerResources(int[] resCountToChange , bool encreace)
    {

        if (encreace)
            for (int i = 0; i < 4; i++)
            {
                playerResouces[i] = playerResouces[i] + resCountToChange[i];
            }
        else 
            for (int i = 0; i < 4; i++)
            {
                playerResouces[i] = playerResouces[i] - resCountToChange[i];
            }   
    }


    private void ChangePlayerAutoGenResources(int[] resCountToChange , bool encreace)
    {

        if (encreace)
            for (int i = 0; i < 4; i++)
            {
                playerAutoGeneratedResources[i] = playerAutoGeneratedResources[i] + resCountToChange[i];
            }
        else 
            for (int i = 0; i < 4; i++)
            {
                playerAutoGeneratedResources[i] = playerAutoGeneratedResources[i] - resCountToChange[i];
            }   
    }


    private void DeleteObj()
    {
        buildingPointCreated = false;

        foreach (GameObject obj in objectsOnDelete)
        {
            obj.GetComponent<BoxCollider>().isTrigger = true;
            obj.GetComponent<Rigidbody>().AddForce(Vector3.down * 50000f);
            Destroy(obj, 4f);
        }

        objectsOnDelete.Clear();
    }


    private bool ResourcesIsEnought(GameObject _selectedBlackBox)
    {
        int[] _resourcesToBuild = new int[4];
        _resourcesToBuild = _selectedBlackBox.GetComponent<BlackBox>().resourcesToBuild;

        int i = 0; 

        while(true)
        {
            if (i == 4) {
                break;
            }
            if (playerResouces[i] < _resourcesToBuild[i])
            {
                break;
            }
            i++;
        }

        if (i == 4)
            return true;
        else
            return false;



    }


    private void SpawnBuildingPoint(GameObject _selectedBlackBox)
    {
        _selectedBlackBox.active = false;

        float buildingRotY = _selectedBlackBox.transform.eulerAngles.y;
        Vector3 buildPos = _selectedBlackBox.transform.position;

        SpawnBuildingChoiser(_selectedBlackBox);
        SpawnBuildingBlocks(_selectedBlackBox);

    }


    private void SpawnBuildingChoiser(GameObject _blackBox)
    {
        Vector3 posForBuilderChoise = _blackBox.transform.position + Vector3.up * 70;
        GameObject buildingChoiser = Instantiate(builderChoiser_GO, posForBuilderChoise, Quaternion.Euler(0,0,0));

        objectsOnDelete.Add(buildingChoiser);

        Transform builderChoiserStol = buildingChoiser.transform.GetChild(0).transform;
        
        var _buildings = _blackBox.GetComponent<BlackBox>().buildingsBlocks;
        builderChoiserStol.localScale = new Vector3(2 + _buildings.Count, 0.5f, 3f);        //Меняем размер столешницы в зависимости от buildingBlocks
        
        buildingChoiser.GetComponent<Rigidbody>().AddForce(Vector3.down * 300000f);
    }


    private void SpawnBuildingBlocks(GameObject _blackBox)
    {
        Debug.Log("SpawnBuildingBlocks");

        int curBuindingNumber = 0;
        var _buildings = _blackBox.GetComponent<BlackBox>().buildingsBlocks;
        Vector3[] curPosBlock = new Vector3[3];

        switch (_buildings.Count)
        {
            case 1:
            curPosBlock[0] = new Vector3( 0, 85, 0);
            break;
            
            case 2:
            curPosBlock[0] = new Vector3( -2f, 85, 0);
            curPosBlock[1] = new Vector3( 2f, 85, 0);
            break;

            case 3:
            curPosBlock[0] = new Vector3( 0, 85, 0);   
            curPosBlock[1] = new Vector3( -3.75f, 85, 0);
            curPosBlock[2] = new Vector3( 3.75f, 85, 0);        
            break;
            
            default:
            curPosBlock[0] = new Vector3(0,0,0);
            break;
        }

        foreach(GameObject building in _buildings)
        {
            Vector3 posForBuilderBlock = _blackBox.transform.position + curPosBlock[curBuindingNumber];

            GameObject builderBlock = Instantiate(building, posForBuilderBlock, Quaternion.Euler(0,0,0));
            objectsOnDelete.Add(builderBlock);
            
            builderBlock.name = (curBuindingNumber).ToString();
            builderBlock.GetComponent<Rigidbody>().AddForce(Vector3.down * 10000f);  //SPEED block

            curBuindingNumber++;
        }
    }


    private string ReturnResourcesString(int[] recourcesArray)
    {
        string finalString;

        finalString = "Дерево = "+recourcesArray[0] + "\n" + "Камень = " + recourcesArray[1] + "\n"+ "Кирпич = " + recourcesArray[2] + "\n"+ "Металл = "+ recourcesArray[3] + "\n\n" + "Жителей = " + (peopleAll-peopleWorking);

        return finalString;
    }


    private IEnumerator addResourcesAuto()
    {        
        while (true)    //Заключаем в цикл
        {
            yield return new WaitForSeconds(1); 
            ChangePlayerResources(playerAutoGeneratedResources, true);
        }
    }


    private void OnTriggerEnter(Collider other)
    {
        selectedObject = other.gameObject;
        layerSelectedObject = other.gameObject.layer;
        
        UI_working(other.gameObject);
    }


    private void OnTriggerExit(Collider other)
    {
        if (other.gameObject.layer == 15)
        {
            resoucesToBuild_UI.GetComponent<UIAnim>().Close();
        }
        if (other.gameObject.layer == 18)
        {
            indMenu_UI.GetComponent<UIAnim>().Close();
        }
    }


    private void UI_working(GameObject _selectedObj)
    {
        if (_selectedObj.layer == 15)
        {
            Debug.Log("Trig enter " + _selectedObj.layer);
            resoucesToBuild_UI.GetComponent<UIAnim>().Open();
        }
        
        if (_selectedObj.layer == 18)
        {
            Debug.Log("Trig enter " + _selectedObj.layer);
            indMenu_UI.GetComponent<UIAnim>().Open();
        }
    }


}