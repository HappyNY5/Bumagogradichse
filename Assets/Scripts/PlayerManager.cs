using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using UnityEngine.SceneManagement;


public class PlayerManager : MonoBehaviour
{
    [SerializeField] private Camera mainCamera;
    [SerializeField] private LayerMask groundLayer;

    [Space]
    [Header("Buildings settings")]
    [SerializeField] private List<GameObject> buildingsTextures = new List<GameObject>();
    [SerializeField] private GameObject builderChoiser_GO;

    [Space]
    [Header("User interface")]
    [SerializeField] private GameObject playerResources_UI;
    [SerializeField] private GameObject indMenu_UI;
    [SerializeField] private GameObject buildingChoiser_UI;
    [SerializeField] private GameObject resorcesToBuild_UI;
    [SerializeField] private List<GameObject> buildCards = new List<GameObject>();





    private List<GameObject> objectsOnDelete = new List<GameObject>();
    public int[] playerResouces = new int[4]{100,100,100,100};
    public int[] playerAutoGeneratedResources = new int[4];  
    public int peopleAll;
    private int peopleWorking;
    private int layerSelectedObject;
    private GameObject selectedObject;
    [HideInInspector] public GameObject selectedBlackBox;
    private bool buildingPointCreated = false;
    private bool buildingIsCreated = false;
    private bool builderChoiserIsCreated = false;
    private CityController cityControllerScript;

    void Start()
    {
        LoadPlayer();
        LoadCity();

        StartCoroutine(addResourcesAuto());
        playerResources_UI.active = true;
        PlayerResources_UI();

        

        mainCamera = Camera.main;
    }

    void Update()
    {
        Ray mouseRay = mainCamera.ScreenPointToRay(Input.mousePosition); 
        if (Physics.Raycast(mouseRay, out RaycastHit hit, float.MaxValue,groundLayer))          //Если касается layer = 10
        {
            Vector3 curPosPlayer = new Vector3(hit.point.x, hit.point.y, hit.point.z);             
            transform.position = curPosPlayer;                                                  //change obj pos
        }

        Debug.Log(layerSelectedObject);


//------------ON DELETE-----------------
        if(Input.GetKeyDown(KeyCode.P))
        {
            int[] res = new int[4]{100,0,0,0};
            ChangePlayerResources(res,true);
        }
//------------ON DELETE-----------------


        switch (layerSelectedObject)
        {
            //Ground
            case 10:   
                if (Input.GetMouseButtonDown(0) & !buildingIsCreated)
                {
                    DeleteObj();

                    buildingChoiser_UI.GetComponentInParent<UIAnim>().Close(); 
                    resorcesToBuild_UI.GetComponent<UIAnim>().Close();

                    builderChoiserIsCreated = false;
                    // selectedBlackBox.active = true;
                }
                break;

            case 11: //InCountry
                if(Input.GetMouseButtonDown(0))
                {
                    ChangeScene(1);
                }
                break;
            
            case 12: //InCity 
                if(Input.GetMouseButtonDown(0))
                {
                    SaveCity();
                    ChangeScene(0);
                }
                break;

            //Black Box
            case 13:        
                if (Input.GetMouseButtonDown(0) & !builderChoiserIsCreated)
                {
                    selectedBlackBox = selectedObject;
 
                    Debug.Log(selectedBlackBox);
 
                    layerSelectedObject = 10;
                    buildingIsCreated = false;
                    builderChoiserIsCreated = true;
                    BuildingChoiser_UI();
                }
                break;
            
            //Ind
            case 18:
                
                GameObject selectedInd = selectedObject;

                IndMenu_UI();
                
                if (Input.GetMouseButtonDown(0))
                {
                    ChangePlayerResources(selectedInd.GetComponent<IndScript>().resourcesPerClick, true);
                }
                else if (Input.GetMouseButtonDown(1) & !selectedInd.GetComponent<IndScript>().indWorking & peopleAll-peopleWorking > 0)
                {
                    selectedInd.GetComponent<IndScript>().peopleOnWork++;
                    peopleWorking++;

                    if (selectedInd.GetComponent<IndScript>().peopleOnWork == selectedInd.GetComponent<IndScript>().workers)
                    {
                        ChangePlayerAutoGenResources(selectedInd.GetComponent<IndScript>().resourcesPerClick, true);
                        selectedInd.GetComponent<IndScript>().indWorking = true;
                    }
                }
                break;


            default:
                // Debug.Log("Layer not registered");
                break;
        }

        PlayerResources_UI();
    }





    //--------------------------------------------------------------
    private void ChangeScene(int _sceneNumb)
    {
        SavePlayer();
        
        SceneManager.LoadScene(_sceneNumb);
    }
    private void BuildingChoiser_UI()
    {
        foreach (int building in selectedBlackBox.GetComponent<BlackBox>().buildingIndex)
        {
            GameObject buildCard =  Instantiate(buildCards[building], Vector3.zero, Quaternion.Euler(0,0,0), buildingChoiser_UI.transform);
            objectsOnDelete.Add(buildCard);
        /*
        если ресурса хватает, то кнопки зеленые
        */
            Color redBack = Color.red;
            Color greenBack = Color.green;
            redBack.a = 0.9f;
            greenBack.a = 0.9f;


            var buildButton = buildCard.transform.GetChild(3).gameObject.GetComponent<Image>();
                Debug.Log(buildButton);
            
            if (ResourcesIsEnought(selectedBlackBox))
            {
                buildButton.color = greenBack;
            }else{
                buildButton.color = redBack;
            }



            if (building == 0)
            {
                string finStr = "Даёт : \n\n" + selectedBlackBox.GetComponent<BlackBox>().people + " жителей";
                buildCard.transform.GetChild(2).gameObject.GetComponent<TMP_Text>().text = finStr;
            }else{
                string finStr = "Даёт : \n\n" + ReturnResourcesString(selectedBlackBox.GetComponent<BlackBox>().resourcesPerClick);
                buildCard.transform.GetChild(2).gameObject.GetComponent<TMP_Text>().text = finStr;
            }


        }
        buildingChoiser_UI.GetComponentInParent<UIAnim>().Open(); 
        resorcesToBuild_UI.GetComponent<UIAnim>().Open();
        ResourcesToBuild_UI();
        
    }

    public bool ResourcesIsEnought(GameObject _selectedBlackBox)
    {
        int[] _resourcesToBuild = new int[4];
        _resourcesToBuild = _selectedBlackBox.GetComponent<BlackBox>().resourcesToBuild;

        int i = 0; 

        while(true)
        {
            if (i == 4) {
                break;
            }
            if (playerResouces[i] < _resourcesToBuild[i])
            {
                break;
            }
            i++;
        }

        if (i == 4)
            return true;
        else
            return false;
    }

    private void PlayerResources_UI()
    {
        Transform[] childArray = playerResources_UI.GetComponentsInChildren<Transform>();
        
        int i = 0;
        foreach (Transform child in childArray)
        {
            if(child.name == "Text")
            {
                child.GetComponent<TMP_Text>().text = playerResouces[i].ToString() + "(+" + playerAutoGeneratedResources[i] +")";
                i++;
            }
            if(child.name == "TextPeople")
            {
                child.GetComponent<TMP_Text>().text = (peopleAll - peopleWorking).ToString();
                i++;
            }
        }
    }


    private void IndMenu_UI()
    {
        Transform[] childArray = indMenu_UI.GetComponentsInChildren<Transform>();
        
        foreach (Transform child in childArray)
        {

            if(child.name == "WorkersText")
            {
                child.GetComponent<TMP_Text>().text = selectedObject.GetComponent<IndScript>().peopleOnWork.ToString() + "/" + selectedObject.GetComponent<IndScript>().workers.ToString();
            }

            if(child.name == "WorkingBack" & selectedObject.GetComponent<IndScript>().indWorking)
            {
                Color greenColor = Color.green;
                greenColor.a = 0.75f;
                child.GetComponent<Image>().color = greenColor;
            }
            else if(child.name == "WorkingBack")
            {
                Color redColor = Color.red;
                redColor.a = 0.75f;
                child.GetComponent<Image>().color = redColor;
            }
        }
    }


    private void ResourcesToBuild_UI()
    {        
        Transform[] childArray = resorcesToBuild_UI.GetComponentsInChildren<Transform>();
        
        int i = 0;
        GameObject lastBack = new GameObject();
        
        Color redBack = Color.red;
        Color whiteBack = Color.white;
        redBack.a = 0.5f;
        whiteBack.a = 0.5f;

        foreach (Transform child in childArray)
        {

            if(child.name == "Slot" )
            {
                lastBack = child.gameObject;
            }
            
            if(child.name == "res")
            {
                child.GetComponent<TMP_Text>().text = selectedBlackBox.GetComponent<BlackBox>().resourcesToBuild[i].ToString();
                
                if(playerResouces[i] < selectedBlackBox.GetComponent<BlackBox>().resourcesToBuild[i])
                {
                    lastBack.GetComponent<Image>().color = redBack;
                }
                else
                {
                    lastBack.GetComponent<Image>().color = whiteBack;
                }
                i++;                
            }
        }
    }

    
    


    public void ChangePlayerResources(int[] resCountToChange , bool encreace)
    {

        if (encreace)
            for (int i = 0; i < 4; i++)
            {
                playerResouces[i] = playerResouces[i] + resCountToChange[i];
            }
        else 
            for (int i = 0; i < 4; i++)
            {
                playerResouces[i] = playerResouces[i] - resCountToChange[i];
            }   
    }


    public void ChangePlayerAutoGenResources(int[] resCountToChange , bool encreace)
    {

        if (encreace)
            for (int i = 0; i < 4; i++)
            {
                playerAutoGeneratedResources[i] = playerAutoGeneratedResources[i] + resCountToChange[i];
            }
        else 
            for (int i = 0; i < 4; i++)
            {
                playerAutoGeneratedResources[i] = playerAutoGeneratedResources[i] - resCountToChange[i];
            }   
    }


    public void DeleteObj()
    {
        buildingPointCreated = false;

        foreach (GameObject obj in objectsOnDelete)
        {
            Destroy(obj, 0.5f);
        }

        objectsOnDelete.Clear();
    }


    private string ReturnResourcesString(int[] recourcesArray)
    {
        string finalString;

        finalString = "Дерево = "+recourcesArray[0] + "\n" + "Камень = " + recourcesArray[1] + "\n"+ "Кирпич = " + recourcesArray[2] + "\n"+ "Металл = "+ recourcesArray[3];

        return finalString;
    }


    private IEnumerator addResourcesAuto()
    {        
        while (true)  
        {
            yield return new WaitForSeconds(1); 
            ChangePlayerResources(playerAutoGeneratedResources, true);
        }
    }


    private void OnTriggerEnter(Collider other)
    {
        selectedObject = other.gameObject;
        layerSelectedObject = other.gameObject.layer;
        
        UI_open(other.gameObject);
    }


    private void OnTriggerExit(Collider other)
    {
        if (other.gameObject.layer == 18)
        {
            indMenu_UI.GetComponent<UIAnim>().Close();
        }
    }


    private void UI_open(GameObject _selectedObj)
    {        
        if (_selectedObj.layer == 18)
        {
            // Debug.Log("Trig enter " + _selectedObj.layer);
            indMenu_UI.GetComponent<UIAnim>().Open();
        }
    }

    public void SavePlayer()
    {
        SaveSystem.SavePlayer(this);
    }

    public void SaveCity()
    {
        cityControllerScript = this.GetComponent<CityController>();
        cityControllerScript.ChangeConntrol();
        SaveSystem.SaveCity(this.GetComponent<CityController>());
    }
    public void LoadPlayer()
    {
        PlayerData data = SaveSystem.LoadPlayer();

        playerResouces = data.resources;
        playerAutoGeneratedResources = data.autoResources;
    }

    public void LoadCity()
    {
        CityData data = SaveSystem.LoadCity();
        
        cityControllerScript = this.GetComponent<CityController>();
        cityControllerScript.blackBoxesControl = data.cityOne;

        cityControllerScript.UpdateMap();
    }

}